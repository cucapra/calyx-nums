WHITESPACE  = _{ " " | "\t" | NEWLINE }
COMMENT     = _{ ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

open    = _{ "(" }
close   = _{ ")" }

file = { SOI ~ fpcore* ~ EOI }

fpcore = {
      open
    ~ "FPCore"
    ~ symbol_opt
    ~ argument_list
    ~ property*
    ~ expr
    ~ close
}

symbol_opt      = { symbol? }
argument_list   = { open ~ argument* ~ close }

dimension = { number | symbol }

argument = {
      symbol
    | (open ~ annotation ~ symbol ~ dimension* ~ close)
    | (open ~ symbol ~ dimension+ ~ close)
}

binding     = { "[" ~ symbol ~ expr ~ "]" }
mut_var     = { "[" ~ symbol ~ expr ~ expr ~ "]" }
index_var   = { "[" ~ symbol ~ expr ~ "]" }

mut_vars    = { mut_var* }
index_vars  = { index_var* }

if_kwd          = @{ "if"           ~ !symbol_continue }
let_kwd         = @{ "let" ~ "*"?   ~ !symbol_continue }
while_kwd       = @{ "while" ~ "*"? ~ !symbol_continue }
for_kwd         = @{ "for" ~ "*"?   ~ !symbol_continue }
tensor_kwd      = @{ "tensor"       ~ !symbol_continue }
tensor_star_kwd = @{ "tensor*"      ~ !symbol_continue }
cast_kwd        = @{ "cast"         ~ !symbol_continue }
array_kwd       = @{ "array"        ~ !symbol_continue }
bang_kwd        = @{ "!"            ~ !symbol_continue }
digits_kwd      = @{ "digits"       ~ !symbol_continue }

expr = {
      constant
    | number
    | symbol
    | (open ~ if_kwd ~ expr ~ expr ~ expr ~ close)
    | (open ~ let_kwd ~ open ~ binding* ~ close ~ expr ~ close)
    | (open ~ while_kwd ~ expr ~ open ~ mut_vars ~ close ~ expr ~ close)
    | (open ~ for_kwd ~ open ~ index_vars ~ close
        ~ open ~ mut_vars ~ close ~ expr ~ close)
    | (open ~ tensor_star_kwd ~ open ~ index_vars ~ close
        ~ open ~ mut_vars ~ close ~ expr ~ close)
    | (open ~ tensor_kwd ~ open ~ index_vars ~ close ~ expr ~ close)
    | (open ~ cast_kwd ~ expr ~ close)
    | (open ~ array_kwd ~ expr* ~ close)
    | (open ~ annotation ~ expr ~ close)
    | (open ~ operation ~ close)
}

number = {
      rational
    | hexnum
    | decnum
    | (open ~ digits_kwd ~ mantissa ~ exponent ~ dec_digits ~ close)
}

annotation = { bang_kwd ~ property* }

operation = {
      (minus ~ expr ~ expr?)
    | (operator ~ expr+)
}

name_kwd        = @{ ":name"            ~ !symbol_continue }
description_kwd = @{ ":description"     ~ !symbol_continue }
cite_kwd        = @{ ":cite"            ~ !symbol_continue }
precision_kwd   = @{ ":precision"       ~ !symbol_continue }
round_kwd       = @{ ":round"           ~ !symbol_continue }
overflow_kwd    = @{ ":overflow"        ~ !symbol_continue }
pre_kwd         = @{ ":pre"             ~ !symbol_continue }
spec_kwd        = @{ ":spec"            ~ !symbol_continue }
alt_kwd         = @{ ":alt"             ~ !symbol_continue }
math_lib_kwd    = @{ ":math-library"    ~ !symbol_continue }
example_kwd     = @{ ":example"         ~ !symbol_continue }
domain_kwd      = @{ ":calyx-domain"    ~ !symbol_continue }
impl_kwd        = @{ ":calyx-impl"      ~ !symbol_continue }

reserved_prop = _{
      "calyx-domain" | "math-library" | "description" | "calyx-impl"
    | "precision"    | "overflow"     | "example"     | "round"
    | "cite"         | "name"         | "spec"        | "alt"
    | "pre"
}

property_name = ${ ":" ~ !(reserved_prop ~ !symbol_continue) ~ symbol }

property = {
      (name_kwd ~ string)
    | (description_kwd ~ string)
    | (cite_kwd ~ open ~ symbol* ~ close)
    | (precision_kwd ~ precision)
    | (round_kwd ~ rounding)
    | (overflow_kwd ~ overflow)
    | (pre_kwd ~ expr)
    | (spec_kwd ~ expr)
    | (alt_kwd ~ expr)
    | (math_lib_kwd ~ symbol)
    | (example_kwd ~ open ~ binding* ~ close)
    | (domain_kwd ~ open ~ number ~ number ~ close)
    | (impl_kwd ~ strategy)
    | (property_name ~ data)
}

data = {
      string
    | number
    | symbol
    | (open ~ data* ~ close)
}

float = { open ~ "float" ~ dec_digits ~ dec_digits ~ close }
posit = { open ~ "posit" ~ dec_digits ~ dec_digits ~ close }
fixed = { open ~ "fixed" ~ exponent ~ dec_digits ~ close }

precision_shorthand = {
      "binary128" | "binary256" | "binary16" | "binary32" | "binary64"
    | "integer"   | "posit16"   | "posit32"  | "posit64"  | "posit8"
    | "real"
}

precision = { float | posit | fixed | precision_shorthand }

rounding = {
    "nearestAway" | "nearestEven" | "toNegative" | "toPositive" | "toZero"
}

overflow = {
    "infinity" | "clamp" | "wrap"
}

lut     = { open ~ "lut" ~ dec_digits ~ close }
poly    = { open ~ "poly" ~ dec_digits ~ close }

strategy = { lut | poly }

pm_opt      = { "+" | "-" | "" }
dot         = { "." }
dec_digits  = @{ ASCII_DIGIT+ }
hex_digits  = @{ ASCII_HEX_DIGIT+ }
nonzero     = @{ "0"* ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

rational = ${ pm_opt ~ dec_digits ~ "/" ~ nonzero }

dec_mantissa = ${ dec_digits ~ (dot ~ dec_digits)? | dot ~ dec_digits }
hex_mantissa = ${ hex_digits ~ (dot ~ hex_digits)? | dot ~ hex_digits }

mantissa = ${ pm_opt ~ dec_digits }
exponent = ${ pm_opt ~ dec_digits }

decnum = ${ pm_opt ~ dec_mantissa ~ (^"e" ~ exponent)? }
hexnum = ${ pm_opt ~ ^"0x" ~ hex_mantissa ~ (^"p" ~ exponent)? }

special_char = _{
      "~" | "!" | "@" | "$" | "%" | "^" | "&" | "*" | "_"
    | "-" | "+" | "=" | "<" | ">" | "." | "?" | "/" | ":"
}

symbol_start    = _{ ASCII_ALPHA | special_char }
symbol_continue = _{ ASCII_ALPHANUMERIC | special_char }
symbol          = @{ symbol_start ~ symbol_continue* }

escape      = @{ "\\" ~ ("\"" | "\\") }
printable   = @{
    '\x20'..'\x21' | '\x23'..'\x5b' | '\x5d'..'\x7e' | "\t" | NEWLINE | escape
}

string = ${ "\"" ~ printable* ~ "\"" }

mathematical_op = {
      "nearbyint" | "remainder" | "copysign" | "lgamma" | "tgamma"
    | "acosh"     | "asinh"     | "atan2"    | "atanh"  | "expm1"
    | "floor"     | "hypot"     | "log10"    | "log1p"  | "round"
    | "trunc"     | "acos"      | "asin"     | "atan"   | "cbrt"
    | "ceil"      | "cosh"      | "erfc"     | "exp2"   | "fabs"
    | "fdim"      | "fmax"      | "fmin"     | "fmod"   | "log2"
    | "sinh"      | "sqrt"      | "tanh"     | "cos"    | "erf"
    | "exp"       | "fma"       | "log"      | "pow"    | "sin"
    | "tan"       | "*"         | "+"        | "-"      | "/"
}

testing_op = {
      "isfinite" | "isnormal" | "signbit" | "isinf" | "isnan"
    | "and"      | "not"      | "!="      | "<="    | "=="
    | ">="       | "or"       | "<"       | ">"
}

tensor_op = {
    "size" | "dim" | "ref"
}

minus = @{ "-" ~ !symbol_continue }

operator = ${
    (mathematical_op | testing_op | tensor_op) ~ !symbol_continue
}

mathematical_const = {
      "M_2_SQRTPI" | "INFINITY" | "SQRT1_2" | "LOG10E" | "M_1_PI"
    | "M_2_PI"     | "LOG2E"    | "SQRT2"   | "LN10"   | "PI_2"
    | "PI_4"       | "LN2"      | "NAN"     | "PI"     | "E"
}

boolean_const = {
    "FALSE" | "TRUE"
}

constant = ${
    (mathematical_const | boolean_const) ~ !symbol_continue
}
